upload to meetups with
  make upload (from the meetups folder);
    or
  RITHM_COHORT=meetups make upload

****************************************************************************************************
outcomes - front-end-and-backend-need-to-knows

  front-end
    html -> 
      what is semantic html?
      what is ths alt important for?

    css need to knows->
      selectors: ways of targeting things in css
        h1 .main -> anything with a class of main but only inside h1 tags (does not have to be a first level decendent)
        h1.main -> h1 tags also with a class of main
        h1, .main -> anything that has h1 or class main
        h1 > .main -> (direct decendent selector) only if .main is a first level decendent h1

      specificity
        elements - 1
        class - 10
        id - 100
        inline-style - 1000
        !important - 10000

      box model
        the margin are not calculated in the width of the box model
        the padding and the border are calculated
        if the border was 20px (40px) and the border is 20px (40px)
        a box with 200px width would actually take up 280px of width
        box-sizing: border-box makes it actually 200px

      layout
        floats -> are moved outside of the document flow and movied to the right or the left (after you have to apply clear)
        positioning
        flexbox
        grid

      responsive design
      architecture

****************************************************************************************************
outcomes - round robin review 

  r13 list
    -react testing (specifically mounting)
      frontend testing is really hard to do
      it may change before the next cohort (react testing library)
    -event loop
    -redux (setup)
      can be used with any language but usually react 
      centralized state managment (putting state in the highest level component) 
      react redux
        provider -> wraps you entire application and accepts a prop called store
                    any component then has the ability to connect to the store by importing the function connect
        store -> 
        connect -> accepts two parameters, both are functions, the second can be an object (usually mapStateToProps and mapDispatchToProps)
                   the envoked function that usually accepts a component
        
    -pure components
    -security
      xss -> cross site scripting 
        injecting javascript into an application
        commonly through a form -> running javascript in an input
        you shoud sanitize your form inputs (convert them to strings)
      sql injection
        putting sql queries into an input
        sanitize yuor inputs ($1 $2 $3 [''])
      man in the middle
        when you transfer something in http it is in plain text
        you can use a packet sniffer to gather the packets and put them back together
        https will encript packets
        server ndns attacts, redirecting you to a spoofed website 
          takes trafic on a public network and instead of taking you to google.com will take you to a site that looks like google.com
        the eff came out with an open source way of creating ssl certificates for free
      csrf
        a hidden form gets submited using the cookie on your browser
        the banking example
        make sure that the server uses some unique identifier
      form highjacking
        try to add additional form inputs to manipulate data in the database
        make youself a paid subscriber, change your username ect
        wtforms help this
        you need server side validation
      ddos
        flooding a server with requests with the intent of taking the server down
        a thousand bots that attack the same server
        solutions -> rate limiting
    -python vs js
    -which teck should you choose
    -refs in react
      allows you to manually change things in the dom
      usually used to select things that already exist but you can create new elements as well
      popular to be used with third party libraries (d3, google maps, svg canvas elements)
      because of the virtual dom in order to make actual changes in the dom you can use refs
      virual dom diff is reconciliation -> process internally where react compares the virtual dom with the actual dom
      things like canvas, file uploading cannot be handled with the virtual dom
      refs give you ability to hook into the dom directly
    -sessions vs tokens
      sessions are coupled to the framework
      json web tokens are a standard across programming languages
    -thunks
      a function that wraps an expression to delay it's execution 
      a pattern in programming where you delay the execution of a function (typically because you are waiting for asyncronous code)
      alternative : redux saga -> uses generator functions, a more sofisticated and robust library
        showed generator functions live on screen
        function* count() {
          yield 1
          yield 2
          yield function() {console.log('hi')}
        }
        c = count()
        c.next()
        c.next()
        c.next()
    -context
    -react hooks
      functional components with state
    


****************************************************************************************************
outcomes - front end need to knows
  
-- no slides review of the job process --

  funnel
    apply      ->
    screen     ->
    2nd screen ->
    take home  ->
    onsite     ->
    offer      ->

  don't perfect things down the funnel until you are getting traction on the top
  don't perfect the top of the funnel when you are getting traction on the bottom

    first pilar of job search is cold applying
    second pilar of job search is reverse recruiting

  go to hackathons
    benefits
      you can go as a team
      join a team
      talk to engineers

  its easier to network with a group of people
    invite other students from the cohort

  do hackerrank a few times before going into a technical phone screen

  takehome challenges
    you have to evaluate if it is worth your time, especially if you haven't even sopke with a human from the company yet  
    if you don't feel comfortable with the take home challenge don't be afraid to pass
    make sure you test and have a readme



****************************************************************************************************
outcomes - whiteboarding (super easy)

  make the argument for why whiteboarding exists
    it is about two things
    1. to see if you are technically capable
    2. can you communicate

  
  don't over psudo-code



****************************************************************************************************
outcomes - js-tricky-parts

  variables that are defined in outer functions that can be remembered long after they return
  this allows you the ability to have private variables

  new to js but not in the slides yet
  private class fields

  class Count {
    #count = 10
    get count() {
      return this.#count;
    }
    decrement() {
      return --this.#count;
    }
  }

  IFFE
    used to enclose a function

    use jQuery example to show a usecase of an IFFE

    const $ = function() {
      const version = '3.2.1';
      return {
        getVersion() {
          return version;
        },
        getHtml() {
          return 'generated html';
        }
      }
    }()

  Automatic semicolon insertion

    function makePerson(fname, lname) {
      return 
      {
        fname
      }
    }

  'JS OOP'
    new -> has to be used before a function
           automatically calls the function
           function greet() {
             console.log('hello');
           }
           new greet;

           'hello'
           => {}

           it will automatically return the object that was created
           sets the keyword 'this' to be that newly created object
           don't return from the constructor because the new keyword will do it for you automatically
           creates a prototype object
           (function hi() {}).prototype
           (function hi() {}).prototype.constructor()
             => ƒ hi() {}

  'Functinal Programming' (mostly just explaining how the build in functions are declarative and have no side effects)
    declarative vs imperitive
    analogy
      imperitive style, directions home
        go outside, take a left, walk 4 blocks...
      declarative
        take the bart
      for loops vs map
      map, filter.. are pure functions
        these is functional programming style

  'Essential Concepts'
    pure functions (should be)
    closure (heavy use in fp)
    function composition -> 
      const doubler = arr => arr.map(val => val * 2)
      doubler(doubler(doubler([1, 2, 3])));
    partial application / curring
      -> function add(a, b){
           return a + b;
         }
         var invokeLater = add.bind(this, 10)

    encourage students to implement their own version of bind
    this has been a somewhat common interview question
       
      




****************************************************************************************************
outcomes - Intermediate How The Web Works

'TCP / IP Model' (part of the OSI model)
  What is a Protocol? -> a set of agreed on specifications
  HTTP -> Hyper Text Transfer Protocol
  SMTP -> secure mail server
  FTP -> file transfer protocol
  -not on the slide-
  SSH -> show the amazon box that holds the rithm curric (what is scp?)
  WS -> Web socket
  TCP -> Transmission Control Protocol

  The three most important protocol layers are the first three
    Application, Transport, Network 
    Application is related to the top of the OSI model (data transfer)
      communication between two machines
    The next layer is the Transport layer
      how do we handle what packets for transportation

  what is significant about number 255?
    show on the board
    a bit is either a 1 or a 0
    8 bits make up a byte
      -----------------
      |1|1|1|1|1|1|1|1|            
      -----------------
      2^0 1
      2^1 2
      2^2 4
      2^3 8
      2^4 16
      2^5 32
      2^6 64
      2^7 128
        adding them all together we get 255 posibilities
    
         
  





****************************************************************************************************
outcomes - system design

'load parameters'
  ration of reads / writes
    ask how often students read vs write to social media site
    most likely you want more resources put toward reading than writing

'two types of scaling'
  vertical scaling / scale up (spending more money)
    typcially the easiest to do but most expensive and has a ceiling
    same amount of machines but faster machines
    getting a bigger boat
    heroku : paying more money for a higher tier of memory
    downside: if you only have one machine and it goes down you have no backup

  horizontal scaling

 'techniques for improved performance' 
   this is not just speed but also reliable

  'fragment cacheing'

  'load balancing'
      how does it work
      write a load balancing algoritym
        incoming n number of arrays each with a random number
        one option 
          round robin -> each student has a 1 then each student has a 2. Problem : the trafic leaves
        smarter option
          frequency counting -> find the server with the lowest count and route the trafic there
        least connections
          ip hash -> there is a difference between a hash and a hash table
                     taking in information running it through a function and getting back the same result every time
                     hash the ip address and then know what server to send it to 
                     e-tag is used for caching something in the browser, useful for caching things like images in the browser

   'content caching'
     one of the most difficult problems in engineering / cache invalidation
     give the idea of memoization
     problems: cache content changes and you have to invalidate the contnet in the cache
     cacheing can be on the frontend or the server
       local storage
       you can cache jQuery in the browser

   'db indexing'
     in sql full table scan is On 
       example -> selecitng a user by 'nane'
     use the analagy of an enclyclepedia, look up the user by name in the index in the back of the book
     searching in a tree is Ologn so the index table is a tree
     demonstrate log2 100000000000000000 in the url bar
     only index columns that are queried frequently because building the tree takes time and space
     postgres uses a b-tree
     primary keys are indexed by default

    'n + 1 queries'
      not as common of an issue
      example : one author writes many books
        select * from authors where name = 'elie'
        we can do this more efficently with two queries 
        select * from books where id in (range of ids)


  'monolithic app'
    sercie -> a part of an aplication that does one specific thing
      example : search
        twitter took one peice / service of the monolith and seperate it from the app
        this is service oriented arhitecture
 
  'service oriented arhitecture'
    give seperation of concerns
      frontend and backend
      you can change the backend to a different language without touching the frontend
      frontend switching from react to view

  'microservice'
    extreme version of 'soa'
    you split up services to be as small as possible
    great of large teams
    but the managment is really hard
    what happens when a few microservices that goes down and causes others to go down which can be complex to track the problem
    many companies have jumped onto microservices and then moved back
    some successful companies use a monolithic
    
    ask questions, what architecture are you using

  'dev ops'
    can be difficult career choice because you might have to be on call 

  'real servers'
    companies typically don't use real servers with the exception of larger companies

  'containers' / docker
    make a sandbox in express

  'lambda function' (serverless architecture)
    if you have a small microservice, you may not want to make an entire backend server for it
    you use a lambda function, aws gives you an endpoint and you make an ajax request to it using

wrapup
  what is new relic / scout used for in conjection to monitoring the performance of an app


   








****************************************************************************************************
outcomes week - OOP review (no slides)
  encapsulate your logic
  python allows you to inherit from multiple classes
  allows you to create pieces of functionality that are easier to test
  do not put a lot of logic in your constructor
  a class should do one thing and do it well
  acronyms
    solid
    law of demeter
    prinipal of least knowledge

  be prepared to talk about

    classes
    instances
    instance methods
    class methods
    constructor function / __init__

  polymorphism
  (many)(forms)

  composition / mixins
    instead of inheriting from classes
    just include multipe classes using the spread opperator
      obj1 = {"fname":"nate"}
      obj2 = {"mname":"paul"}
      obj3 = {"lname":"lipp"}
      obj4 = {...obj1, ...obj2, ...obj3, fullName: 'nate paul lipp'}




******************************************************************************
outcomes week - Git Workflow (no slides)

  start with an introduction on the differences between being a student and an engineer
  to be a success in your first job the challenges are
    getting up to speed on the code base
    knowing when to ask questions and when to ask help
    when someone gives you instruction respecting their response and not just agreeing but focusing on your own problem

  professional git workflow
    red is the working directory (pre-staging)
    green in staging 
      be careful with 'git add .' you should be looking at the files you are commiting with git status

    show how to make a git commit on multiple lines
      start a string with quotations can enter on multiple lines, end the message with closing quotes

    'git log' vs 'git log --oneline'

    show how to move a file out of staging

    when commiting if you do not add -m you will be in vim
      show how to add a message here
      show how to 

  'Professional commit messages'
    ending a subject line with a period can actually cause bugs (the parser thinks it is a part of a url)
  
  
  questions -> 
    how often to commit?
    commit really frequently, these will most likley get squashed anyway
    if you are using 'and' in your commit message you are not commiting enough
    commit more frequently because if something breaks it is easier to go back


    git checkout master
    git pull origin master
    git checkout <your-branch>
    git merge master


******************************************************************************
  DSA -> Sorting

    -Lecture

      what I want students to remember

        In interview questions related to sorting, listen for flags

          1 -> is the data set already sorted!!!
          2 -> are the elements bound to a range
               comparative vs non-comparative sorts
               comparative sorts are O(n log n) non-comparative sorts are O(n)
               The range of items you are sorting is bound (comparative vs non-comparitive sorts)

            -> The build in sorting method of the language uses optimizations such as mixing quadratic and linar sorting algorithms
               In other words you are not going to beat the langauge most of the time unless...
                 You may not need a logarithmic sort if

                   Quadratic sorts (insertion sort) can actually perform in On time if items are almost sorted
                   elements are bound to a small range so that we can use a non-comparative algorithm such as counting sort


      move this until later
        start by introducing comparative and non-comparative sorts

        'simple algorithms'
          [2, 6, 6, 8, 3, 3]

      practice:
        how to teach js built in sorting (probably in the terminal)
          review js mdn (lexigraphic not numeric by default) 
          maybe ask them how to sort an object


    -Notes
      python
        instructors.sort(key=lambda item: item['name'])
          'lambda' is an anonomyous function
          'item:' is the argument

      stable vs natural sorts
        What is a stable sort, why is it important?

        QuickSort, Heap Sort, and Selection sort are the unstable sorting algorithm

      difference between lexigraphic and numeric sorts

      Collation (kull - ation) (kull - ator)
        A collation algorithm such as the Unicode collation algorithm defines an order through the process of comparing two given character strings and deciding which should come before the other.
        International collator in js
          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator

        International collator list
          http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry

        Do the non-comparitive sort with numbers between 0 and 9
          [2, 1, 3, 2, 9, 8, 1, 2]
          
          [ 0, 2, 3, 1, 0, 0, 0, 0, 1, 1 ]
            0  1  2  3  4  5  6  7  8  9

          => [1, 1, 2, 2, 2, 3, 8, 9]


    -Questions
      How to teach DSU

        Slide:
          DSU Pattern
            Comparator functions may have to run O(n log n) times — a lot!
            Some sorting libraries don’t use comparators & use a “DSU pattern”
            Decorate: wrap item with “key” for sorting it
            Sort: using that key
            Undecorate: remove that wrapper to reveal original item
            This can be faster than comparators, but often uses more memory




    xhow do display logrithmic time in the terminal


    read about counting sort -> relation with bucket / radix sort?
    read about non comparative sorts -> http://pages.cs.wisc.edu/~paton/readings/Old/fall08/LINEAR-SORTS.html
    read sorting history




****************************************************************************************
Daily Journal


x-x lecture -> 
  lab -> -> 
    ready score 
      -morning lecture
      -morning lab
      -afternoon lecture
      -afternoon lab



--------------------------------------------------
15-1 lecture -> js-tricky-parts
    ready score 
      -afternoon lecture
        moved really quickly over the first few slides
        They don't need to know anything special about XHR

        Closure
          inside about:blank

          in javascript functions can return functions, not an option in python

          function counter() {
            return function() {
              retur "Hello!";
            }
          }

          counter()()

          closures give us the ability to create private variables

          function counter() {
            let count = 0;

            return function() {
              return ++count;
            }
          }

          c = counter()

          c();
          c();
          c();
          
          you can't access count but each time c is invoked the count is the return value

          function counter() {
            let count = 0;
            let name = "Elie Shoppik";

            return function() {
              debugger;
              return ++count;
            }
          }

          you will never be able to access the name variable because it is not being used inside the inner function
          you can see this in the dev tools

          Question:
            arrow functions will have the same behavior
          Answer:
            yes??

          closure is a nice way to create protected variables

          use cases
            serial id generator

          **************************************************
          prefix postfix opperator

            newNum = num++;
            => undefined

            newNum
            => 0

            newNum2 = ++num;
            => undefined

            newNum2
            => 2

            why?

          **************************************************
          IFFI (needs work)

           (function() {
             let firstName = "elie"
             return {
               firstName
             }
           })();

           (function() {
             let firstName = "nate"
             console.log('Your name is', firstName)
           })();

           => 'Your name is elie'
           => 'Your name is nate'

           If you want some information scoped privatley you put it in a function that executes itself right away

           let module = (function() {
             let firstName = "nate"
             return {
               firstName
             }
           })();

           module


          **************************************************
          IFFI + closure

            copy paste into google.com console
            show how to access the protected version variable

            didn't go that deeply

          **************************************************
          JS OO Under the Hood

            the class keyword is an abstraction of fundamental principals and ideas in js / a mix of functions and objects
            syntactical sugar

            classes are actually functions
              typeof class X {}
              => 'function'

            classes have to be instanciated using the 'class' keyword

            classes require that you call new() to create a new class
              what does the 'new' keword do?
                1. creates an object
                2. sets the keyword this to be that object
                3. return the object
                4. creates a link (the link is the __proto__)

            example

            class Person {
              sayHi() {}
            }

            elie = new Person
            => Person {}

            the 'sayHi()' method is not there

            when you create instnances in a method you place then on the prototype

            Person.prototype
            => {constructor: f, sayHi: f}

            elie.sayHi()
            => undefined

            elie.__proto__ === Person.prototype
            => true

            **************************************************
            before we had classes

              if we wanted to add an instance method to the function we had to do so directly on the prototype
              with classes in es2015 all of that is done for you

              function Person(firstName, lastName) {
                this.firstName = firstName;
                this.lastName = lastName;
              }

              Person.prototype.fullName = function() {
                return `${this.firstName} ${this.lastName}`
              }

            **************************************************
            Every function has a constructor property 

              Person.prototype.constructor === Person
              => true

            **************************************************
            FS vs OOP

              In js you use both
              Didn't go that deep into these with examples

              in functional programming
                a function should not have side effects

                curring 
                  call the function over and over again, if the argument is missing just return the function so that you can chain them together

                easily testable units


            **************************************************
            Design Patterns

              only a few sentences

              "use strict" (was not a part of a slide)

              function add(a, a) {
                return a + a
              }

              fails silently without "use strict"

            **************************************************
            Make an array or object immutable

            arr = [1, 2, 3]
            arrImm = Object.freeze(arr);

            arrImm.pop() // throws an error

            there are some edge cases this wont work for but there are libraries

            **************************************************
            hoisting
              when hoisting var you have access to it
              with let and const, hoisting still happens but you cant access it so it will throw an error

            **************************************************
            arrow functions
              do not get their own this

            **************************************************
            setTimeout with 0

            setTimeout(function() {
              console.log('Starting')
            }, 0);
            console.log('all done')

            show event loop on the board
              stack 
              heap
              event que
              




13-5 outcomes-data-storage
    ready score 2 (don't really have enough background for many of these topics)
      -lecture
        cache validation -> really tough problem in CS



12-5 lecture -> Deployment for Developer
  lab -> 
    ready score 3.5 (need better notes)
      -lecture
        search
          handle 404 when you refresh a react app that used react-router
          react router surge fallback url 
          build/200.html

          how to find hackathons

      -lab


11-5 lecture -> sorting -> dsa wrapup
  lab -> -> 
    ready score 5
    ready score 3.5 (need more on self balancing trees and bloom filters, the 'must knows' slide summarizes everything we learned)
      -morning lecture
        this was given by me
      -morning lab
      -afternoon lecture
        
        
        'dynamic programming'
          1. find the optimal substructure (hardest part)
          2. find overlapping subproblems

        'The "must knows"'
          should regergitate all of the core concepts that we covered in dsa week

        make a repo in github for solving leetcode problems!!
          this also fills out your green squares for daily commits

        'practice online'
          general challenges
            leetcode...

            'these are great sites for getting you prepared and also great for crushing your confidence' -elie
            time box your attemps

          

      -afternoon lab


11-4 lecture -> Graphs
  lab -> Graph Exercises
    ready score 3.5
      -morning lecture
        key point:
          trees never have a cycle but a graph can

        grpahs can be directed / undirected
                      weighted / unweighted
                      cyclical / acyclical

        dag -> directed acyclical graph 

      real world examples for weighted graphs
        street directions
        flights
          are you consdering cost as weights or travel time ect

      'food chain' (asyclical, directed, unweighted graph)
        why does it have to be ascylical?
        why is this not a tree?

        adjacency list
          stores nodes that are adjacent 

      'facebook friends' (undirected, unweighted, cyclical)
        demonstrate :
          how facebook might be able to recommend friends
          linkedin show how many connections away a user is
          quiz on who is in Maggie's adjacency list (Flanders, Lisa, Homer)
            alter the graph to be directed and quiz again

      'carpooling'
        uses the graph coloring algorithm
        uber example :
          finding people in a certain vicenity and pair that with number of seats avaialble

      'adjacency list'
        usually an array of arrays or matrix
        can represent both directed and undirected connections
        
      Node and Graph Class
        -students should model in pairs
          what should the graph class contain
          what should the node class contain

      Sets work better than arryas or linked lists in graphs when working with adjacency lists
        order doesn't matter
        there should not be duplicate values
        we don't care about creating our own keys

      'Solution'
        deomonstrate circles and arrows on the whiteboard
        Queue Array []
        seen Set    ()

      'Recursive Solution'  
        show with a call stack on the board

      'Recursive solution' demo/friends.js
        write a small example agian with a stack on the board

      -morning lab

        Dykstra (sub lecture)
           

      -afternoon lecture
      -afternoon lab


11-3 lecture -> Trees & Binary Trees -> Binary Search Tree
  lab -> Trees Exercises -> Binary Search Tree Exercises
    ready score 5 (would be fun to talk about the association between linked lists(as queues) and arrays(as stacks) and relate that to bfs and dfs)
    ready score 4 (need to focus more on explaining logrithmic math concepts)
      -morning lecture
        Key points -> 
          start with the difference between a queue and a stack
            the difference between bfs and dft
            bfs is iteration with a queue
            dfs is uses the call stack and recursion

          everything you can do with iteration you can do with recursion
            but what about tree like structures? how to do with iteration -> you have to make your own stack instead of using the callstack

        unary trees -> has one child node (pretty much like a linked list)
        binary trees -> has two child nodes
        nary tree -> has n children

        a tree is like an upside down tree (show on the board)
      
        filesystems are nary trees

        trees are used for heiarchy type organizations such as a company ceo -> opperations ect...

        'A filesystem is a tree'
          explain bfs and dft
          walk through the psuedo code searching for todo.txt
          explain recursion concepts / pausing on the stack, pop off the stack etc
          show dfs using a stack on the board and search for recipies.txt
            dfs is a beautiful alago because we only place an element on the stack once On
          show how the root is the tree we are opperating on then the tree becomes a child node 
            (that child node becomes the root of an entire tree we are working on)

         'HTML Dom is a tree'
           have a student explain psuedo code for dfs

         'This is not a tree'
           a node has to have one parent
           can't have two parrents
           this is a graph
             all trees are graphs, but not all graphs are trees

          'finding a node'
            show bfs
              amy still goes in the que even though she is the root
              [amy, ...]
              ask for the most efficent way to represent a queue (linked list, they should point this out to an interviewer)

          'do you really need a tree class' (oop design principal)
            delegate pattern -> uses a tree class basically to point at the root and to have methods to delegate different methods 


          'linked list is actually a tree'
            a singly linked list is a one directional unary tree
            a doubly linked list is a bi directional unary tree

          'some trees point up'
            don't go into very much

          'some point both ways'
            -> is a bidirectinoal tree
            don't go into very much (mention recursion)
          
        Review:
          what is the difference between bfs and dfs
            queue(bfs) vs stack(dfs)


      -morning lab
        linked lists outpreform arrays as queues (used in bfs)
        arrays have constant push and pop methods so they are fine for stacks (used in dfs)
          -> there is also a stack build in using recursion

      -afternoon lecture -> binary search trees
        show circles and arrows on the whiteboad for insertion into a bst

        'binary search tree'
          ask students to explain how we would traverse through the tree to find if a word matches the string 'apple'
            each time we move right or left we never again have to worry about the opposite side of the tree (we cut the nodes we need to travel to in half)
              1. we compare the value 
              2. if there is a value to traverse to (either to the left or right)
                 - if there isn't return
                 - if there is recurse
              3. go back to step 1
              this could be done recursivley or iterativley
          give an intro to log time but will come up again

         show in the url bar the magin of logrithmic time
           log2 1000000000000000
             -> 70

        'valid but badly balanced'
          show visualgo site (avl tree / self balancing trees)

        tell students not to worry about writing the code for avl trees or red black trees
          these are too advanced
          you can show them how they work using visualgo
          also instruct students to just tell the interviewer if the tree is unbalanced we could use a red black tree or avl tree

        'Traversal'
          walk through circles and arrows on how to insert into a binary search tree
          introduce difference between bfs (queue) and dfs (stack)
            bfs is typically are done with iteration because you need a queue and can't rely on the callstack
          show both dfs and bfs on the board with circles and arrows (students can provide the instructions for traversal)

          show one of these on the board when doing dfs with the call stack
            pre-order  in-order  post-order
            ---------  --------  ----------
            do         left      left
            left       do        right
            right      right     do

        'Binary tree vs hashmap'
          often used to implement indexes in databases
            common full stack interview question
              searching through a database is On
              select * from users where username = 'nate' (On)
                a database index is a sublemental datastructure that allows us to search more efficiently
                primary keys are an exmaple of an indexed column
                downside to indexing is everytime a row is updated, deleted, added, we have to update our database index
                could use the analogy of an enclyclopedia where you can look up in the back the page of a topic instead is faster than scanning the entire book
                binary search trees are a common use case for database indexing


      -afternoon lab


      'Binary search tree find'
      current.val

11-2 lecture -> Recursion -> Maps / HashTables
  lab  
    ready score -> 4.5 -> 2.5 
      -morning lecture
        review 
          where do you see stacks? (arrays)
            show using two stacks / example of history in the browser
          where do you use queues (linked list)
            printer example (would be a good time to review arrays vs linked lists)
              enqueing
              peeking
          priority queues
            double linked list

        big picture
          recursion requires three things
            to call the function from within the function
            a base case
            progress

        'funcitons calling functions'
          show the call stack, place a() log b() on the stack

        counting (loops vs recustion)
          demonstrating on the white board the call stack example
          do it again with the debugger

          there is another count function with log() before and after the function call use the debugger here to.

        'base case'
          degenerate case -> just means when there is nothing left

        establish the difference between degenerate base case and index like base case

        'Recursion'
          how can you determin if an object contains a key (when values can be additional nested objects)
          could ask how could we code this out recursivley and iterativley
            show code for both approaches on the screen

        ''
          show stack overflow in the console, (should not crash the browser)

        'Functions calling functions'
          draw out the call stack
          show the code in the console
            add debugger before each function call b(), c(), console.log('i') 

        'Count to 3'
          review the code
          they do the same thing
          recursion is overkill

        'call frames / stack'
          walk through the code and show the stack on the whiteboard
            keywords 
              execution is paused
              defalut parameter
            why did we put count(4) on the stack?

        'more counting'
          walk through on the board again

        'explicit vs hidden base case'
          the base case it not necessarily always `if() return`
          hidden base case is not as explicit but also works
          

        'finding sum of a list'
          use degenerate example
            f([4, 3, 2, 1])
            f([3, 2, 1])       list[0] + f([3, 2, 1])
            f([2, 1])          list[0] + f([2, 1])
            f([1])             list[0] => f[1]
            f([]) (base case)  return 0

            show in the dev tools


        'The problem'
        data.flat() // but we are going to do this the hard way

        ''
          show in the terminal making a folder of files and then show how to remove it recursivly
            show tree with $ tree.
            rm -rf why is recursion required

          in chrome dev tools
            document.getElementById('taco');


        'Runtime'
          [1, 2, 3, 4, 5]
            On
          every element is sliced
            On2
          also On2 space
            recursion space complexity is measured by the number of functions on a callstack (probably something like On)

        'Accumulating output' // helper function recursion
           noboy in an interview is going to say you can't use this pattern
           easier and sometimes improves the time / space complexity
          

        review
          goal is to identify where recursion is useful
          quiz three things recursion needs
            base case
            progress
            calling the actual function

      -morning lab
        Sometimes students had problems understanding you can't return directly from the base case, 
          it has to be passed to the funciton that called it and back up the chain

      -afternoon lecture
        Hash Tables
      

        The joke among technical interviews: if you don't know the answer, Hash Table!
        everything is constant

        what is the difference between an object and a map in js?
          object keys can only be strings
          maps can have other data types as keys
          finding the number of keys in an object of o(n)
          maps also has m.size to give you the length of the map in constant time

        'Typcial Api'
          left column constant time
          right column linear

        'Simple Implementation'
          is not good enough
          how can we do better

        'Hash Tables'
          we need to be able to understand better what a hash table actually is
          an array
            when we run a value in our hash function we always get back the correct key
            hash function -> a specialized function that takes in an input and always gives back the righ location / key
          with our hash function we care about consistency and speed more than security
            if we run a key through our hash function it will always give us the correct value

        'Hashing'
          show how mod works in the browser
          
        'Hashing'
          you will never need to implement your own hash function in the real world but sometimes students are asked this in interviews
          

        The reason we only go to 127 in askii is because of bytes
          humans choose base 10 because we have 10 fingers / toes ??

        Some students have had questions about Hash tables specifically writing a reasonable hashing function

        Maps vs Objects
          you can find the number of keys using size

        Hash functions need to be well distributed otherwise the bucket of values (array) become On / or you could have hash tables with hashtables

        open address / linear probing -> is instead of creating a bin of elements on colision, we go and find another space to put the current element

      -afternoon lab


11-1 lecture -> Arrays and Linked Lists -> Stacks and Queues
  lab -> Arrays/Linked Lists Exercises
    ready score 5 (would enjoy teaching this one)
      -morning lecture
        be prepared to talk about abstract data types
          
        Arrays / memory 
          memory is a brick of slots each with a unique address and arrays are stored contiguously in constant time

          why contigously? 
            how is this realted to constant time lookups with arrays?
            what are the downside of storing arrays contiguously


          show a diagram of memory slots

        Why are direct arays helpful
          direct arrays are composed of containers that are required to holding the same length

          Type arrays are available in javascript, demonstrate js type arrays in the docs but stress that these are not common (only sometimes seen in node)

          Indirect arrays are what we typically use in js
            don't actually store values, they store addresses to slots in memory (so it is actually a two step process, find the address, look up the address)

          sparse arrays -> arrays that are mostly empty -> mostly unecessary for software engineer but good to have a general mental model

        Linked lists are an implementation of the list abstract data type
          linled lists are not stored contigously in memory

        Map out nodes on the board then in the console?
          Matt only mapped them in the console

        When talking about using a class for the node and linked list show the starter code for the days exercise

        show on the whiteboard the differences in time complexity between linked lists and arrays

        show manaully what iteration through a linked list looks like in the console
          node
          node.next
          node.next.next
          node.next.next.next
          ... until it points at null

          then show manually
            let curNode = head
            curNode = curNode.next

          create the listand link the nodes
          copy paste into the console a print function to use as a linked list for showing while loop iteration

          map out a linked list with arrows and circles on the whiteboard for adding, removing, inserting ect

          advise students to make sense of mapping out the arrows and circles first, if they can't understand the mapping they won't be able to write the code

          map all the examples with circles and arrows first!!!
            when demonstrating removing a node from a list show how the order of opperation matters
              first find the node that is before the node being removed
              then point that node to the .next.next
              then point the .next to null
              ask what happens if you point .next to null out of order

          what are the edge cases? what if you remove the last element from a list

          be prepared to talk about amoritized time complexity (when pushing to an array)
            you can map this out on a graph where insertion is constant, constant, constant until you have the move the array (a spike in the graph) 
              but hand wave draw a line across the graph and say it averages out to constant time

          show common data structures (complexity) from big o cheatsheet

        when given a dsa style interview you will be expected to recognize the correct dsa
          



      -morning lab
        show students how to import their code in node to see if the methods from the exercise is working like they are expecting
        another option is to use chrome dev tools and debugger

        linked list summary
        arrays have constant time for both adding and removing on one end but the other end is linear time for both adding and removing (2 of 4)
        arrays have constant time lookups 
        linked lists have constant time for adding and removing on one end and constant time for adding and linear time for removing on the other end (3 of 4)
        linked lists have liner time lookups

        because linked lists can remove from the head and add to the tail both in constant time they are superior for queues where you don't need constant lookups

      -afternoon lecture
        heaps are introduced but not explained in detail   

      -afternoon lab
        be prepared to explain heaps with circles and arrows (VisuAlgo)



10-5 lecture -> React Wrapup
    ready score 3 (need some work: Refs)
      -lecture

        Refs
          external libraries (espeically data visualization)
          uploading a file

          you should not be using document.select ect to access the dom directly
            react creates a virtual dom (essentially a giant object that represents a dom)
            you should not try to interact with the dom the non react way

        the experimental arrow syntax is safe to use in create-react app but is not ready for some browsers like firefox

        Stateless Functional Components
          There are two ways to make components in React
            classes and functionns
            functions don't have classes though... in come hooks

          first explain stateless functional components
            including returning from an arrow function with parentheses
            passing down props and desctructring the props in the argument space
            These are great if you don't need state or lifecycle methods but you have to re-factor every time you need to add state

          Stateless functional components no longer exist because you can now add state using hooks
          

        Optimization
          show example of the list getting re-rendered on every onChange of an input form
          a simple solution is to move the form to it's own component

        n+1 query / n+1 problem
        you are running n just to add one
          this appears when the list re-renders after submit and every list item is re-rendered even though we only need the newest

        instead use 
          shouldComponentUpdate(nextProps, nextState) {
            this.props, this.state
          }

        or just use 
          class App extends React.PureComponent

        only get what you need from the redux store in a connected component 
        so that your store connected component does not re-render whenever there is a change to the store, 
        only listens to the part of the store that the component subscribes to


10-3 lecture -> Redux Thunk
  lab 
    ready score 3 (could probably show how to do this but Elie has really good lecture that I can't deliver at that level yet)
      -morning lecture
        redux testing (mini topic)
          better to have a lot of simple unit tests in a takehome challenge than large integration tests

        constructors cannot be asyncronous (this is javascript not react)
          class A {
            async constructor() {} // throws an error
          }


        'Loading Todos'
          if we go to all the trouble of moving our state functionality to redux 
          then it would be better to also move the async data request into our action creators as well

          if we are going to include all this abstration logic with redux then we should also move our api requests in our acitons

          instead of our action creators immediatley returning objects we want our actions to be able to dispatch multiple things based on asynchronous actions
            error message
            api requests
            state updates

          we would like our action creators to do more than one thing (multiple dispatches)

          (example for the console)
            a thunk is a function that wraps an expresion so that we can execute it at a later time
            instead of 
              total = 3 + 3

            wrapped function allows us to delay
              total = () => 3 + 3

            later we can call 
              total()

          what is the expression we want to do in redux
            we want to delay the dispatch

            we want to wait for the return data from the api request
              then executed the thunk wrapping the action action


          gotTodos (Action creator) is defined seperate from getTodosFromApi() for testing purposes

          redux thunk gives you the ability to pass dispatch to the action creator

          actions are objects with the key of type 
            unless it is a thunk then actions become functions that can have multiple levels of logic
              but eventually the action still needs to return an object with a key of typel

            with a thunk there is a possiblity we are not just going to dispatch a function that returns an object
            when redux sees that a thunk has been added during dispatch, the action creator is evaluated to see if it is an object or a function
              if it is a function -> I am going to delay the execution of dispatch because I am going to run that function for you

          encourage students to read the source code for redux thunk

          thunk askes are you a function are you an object (of the action creator)
            if you are a function -> run the function, await and run the dispatch (dispatch must be passed in)

          testing react component
            test -> 
              the component mounted
              a function was called to request data from the api
              done

          instead of just your redux component having the ability to dispatch
            now action creators have the abiltiy to dispatch multiple time (usually after awaiting somehting)

            an action can now be a function that accepts dispatch as an argument
            a thunk returns a function

          action creators can return more than just objects, they can return functions
          


            




          
      -lab


10-2 lecture -> React-Redux Part 2
  lab -> Shoply
    ready score 
      -morning lecture
        show example of usecase for ownProps as second argument to mapStateToProps()

          function mapStateToProps(reduxState, ownProps) {
            let foundItem = ownProps.match.params.id // comes from react router props
            return {
              currentItem: reduxState.items.find(item => item.id === foundItem)
            }
          }

          mapStateToProps happens every time the react state changes (reducer functions must be pure!)


        show example of mapDispatchToProps()
          
          function mapDispatchToProps(dispatch) {
            return {
              addTo: function(task){
                dispatch({                // dispatch is not necessary, see below
                  type: 'ADD_TODO',
                  task
                })
              }
            }
          }

          this.props gets overwriten by mapDispatchToProps ???
          but now we can write this.props.addTo('go home')

          point out that this pattern of defining the actions in mapDispatchToProps gets messy, how can we do better?

          why do we have mapDispatchToProps?
            it's nicer to abstract the code away
            allows us to test the dispatch functions in isolation

          you do not need to explicitly call dispatch when using mapDispatchToProps()
            mapDispatchToProps will recognize if it contains a function that returns an action dispatch is not necessary
            connect will go through each of the keys and check if the function returns an object, will know to use dispatch

          functions that returns actions are called action creaters
          function that returns an object with a key of type

            const mapStateToProps = {
              increment: (num) => ({ // increment is an action creator
                type: 'INCREMENT',
                payload: num
              })
            };

          show moving the action creator into a seperate actions file (makes it easier to test)

          we can create a central file that holds all the values for the key of type in our actions (actionTypes.js)
            This allows us to import into our tests and all files that need the action type
            If we need to change the type name we have a single central place to do this

          in the 'Containers in Detail' sectin
            example: make a request to the database and then store it in redux memory so you don't have to make multiple api calls for the same data
            design decisions: what do you store in the client's memory for quick access, when to make make an api call for it

          side note :
            reducs is a flux architecture


      -lab
        instruct students to use an object to store the products in the cart instead of an array because of performance
        the solution could use more tests
          reducers:
            create an empty state object
            apply the reducer

            test the purity of the reducer
              are you creating a new reference when you update state
                (must use to.be not toEqual so that you are not making a deep comparison

                read the react-redux documentation
                  especially on the shape of state


10-1 lecture -> React Redux -> Redux Introduction
  lab -> Redux Exercise -> React + Redux Exercises
    ready score 4
    ready score 4
      spend a lot of time practicing in chrome dev tools (how all the pieces work together)
      cold calling works well here

      -morning lecture
         what are some other common libraries that work well with redux other than react 
         the joke about redux: there are about 4 functions but it takes about 4 months to learn
         make connections between redux and context (redux if a more complex version of context and scales better)
         there is a central object to hold state, this is the store

         show the 5 methods that come with Redux (in chrome dev tools, link index to redux cdn)
           #1
             -> Redux.createStore()
                  error: missing reducer

                  reducer definition: (function used to make changes to the state)
                    is a function who's purpose to define the initial state (definition) 
                    and to be in charge of what you state looks like after a change happens

             *key concept: createStore will imediatley envoke the reducer to that inital state will be set

             ->  function reducer() {
                  console.log('this string will print when the store is created')
                  return []
                }

             -> store = Redux.createStore(reducer)
             -> store {dispatch: ...}
             -> store.getState() => []

           #2
             function counterReducer(state, action) {
               console.log(state)
               console.log(action)
               return { count: 0 }
             }

             actions are objects with a key of type
             store.dispatch() -> a function used to interact with the state
                                 the only way to change state is with dispactch envoked with an action
                                 it will run the reducer, the function which is in charge of chaging the state
                                 must recieve an object with a key of type (show error messages without object and without key of type)

           #4
             recap          students fill in
             // store    -> where you state lives
             // reducer  -> functions that change state and returns what our state looks like
             // action   -> objects with a key of type
             // dispatch -> method called on the store, accepts an action and runs the reducer


           * reducers should be pure, they should not directly mutate state

             Pure functions -> does not have any side affects
                               in order for redux to decide weather or not to re-render, 
                               a comparison between the current state and previous state is made, 
                               if your reducer function is not pure there may not be any difference between the previous state and the current state

             a nice example
               function double(nums) {
                 return nums.map(num => num * 2);
               }

               nums = [1, 2, 3]
               double(nums)         // doubles once
               double(double(nums)) // doubles twice
           


          *practice in the terminal

            function reducer(state={count: 0}, action) {
              if (action.type === 'INCREMENT_COUNT') {
                return {...state, count: state.count + 1}
              }
              return state;
            }

            store = Redux.createStore(reducer)

            store.getState()

            store.dispatch({type: 'INCREMENT_COUNT'})

            store.getState()

            // gotcha : you can't modify reducer without re-running store = Redux.createStore(reducer)
            function reducer(state={count: 0}, action) {
              if (action.type === 'INCREMENT_COUNT') {
                return {...state, count: state.count + 1}
              }
              if (action.type === 'DECREMENT_COUNT') {
                return {...state, count: state.count - 1}
              }
              return state;
            }



      -morning lab
        some questions around
          should we define the emoji when we disatch or hard code it into the reducer
            probably better to hardcode in the reducer so that if you change the emoji you don't have to update it in multiple locations throughout the app (elie)
          
            the solution actually does it the other way around

          further study
            the subscribe just looks like this
            it runs after every state update

            store.subscribe(function() {
              renderFace();
            })



      -afternoon lecture
        Redux is not React specific so we use react-redux
        connect() allows you to connect your component 
          -> import { connect } from 'react-redux'
          -> instead of connecting to the store you use connect()
          -> after connecting successfully you get access to this.props.dispatch
          -> you always get dispatch for free 'this.props.dispatch'

        live coding
          create-react-app counterApp
          npm install react-redux redux 
            react-redux -> connect(mapStateToProps)(ComponentName), Provider
            redux       -> createStore() 

            touch reducer.js 
              when creating the reducer mutate the state of DECREMENT_COUNT purposly

          put a debugger in render

          show the react dev tools live


      -afternoon lab


9-5 lecture -> 
  lab -> react-context (Matt)
    ready score 4.5
      -lab
        
      -lecture
        The syntax has changed a lot so be mindful of the materials online

        context is useful for
          show example of prop drilling, many time a component doesn't even need the prop it just has to pass it along
          curUser has to be high in the app but is called throughout the app
          a color theme is an another example of state that needes to be accessed throughout the app

        in the context object
          when you wrap something in the provider you are setting the data in the context
          when you wrap something in the consumer you are getting the data in the context

        <Context /> is a component -> you can see it in chrome dev tools

        static context type is a cleaner way of consuming the context
          this only works with class components



       

9-2 lecture -> Client-Side Routing with React Router -> Patterns in React Router
  lab -> React Router Vending Machine -> React Router Patterns
    ready score 4?? looks fun, get to talk about single page apps
      -morning lecture
        server-side routing was the only routing until recent client side routing
          each url gets a page from the server and gets full html back

        what are the benifits of single page apps?
          don't have to make request to a server
          the code gets pre-loaded
          great for mobile / or sites that have a mobile app type of feel
          you don't have to reload on every request

        develope a connection between onClick and render???
          links are like <a /> tags

          non react router pattern
            <a onClick={() => this.goToPage("drink")}>Drink</a> 

          react router pattern
            <BrowserRouter>
              <Route exact path="/drink" render={() => <Drink />} />
            </BrowserRouter>


      -morning lab
      -afternoon lecture
      -afternoon lab



9-1 lecture -> React Component Lifecycle
  lab -> React Lifecycle Exercise 
    ready score 4

      -morning lecture
        generally speaking a hook is just a function or a name that you can tap into

        in our examples the hooks must use the exact keywords

        make sure students know that we don't actually call these methods they happen automatically

        1. mounting (when it appears)
          render runs before componentDidMount but not before the constructor runs
            constructor -> render -> componentDidMount
            loading... happens when the constructor mounted the component 
              but we are waiting for an axios response that was called in componentDidMount

          a component mounts only once (putting the component in the dom)

          there are two hook functions for mounting
            constructor() -> 
              the code related to startup (should be sparse)
              you can run async code
              mostly only runs once at the beginning, 
                but not guarenteed to only be ran once (shouldn't set timers / ajax requests here)

            componentDidMount() -> 
              guarenteed to only run once
                better for setting intervals / timers
                better for making ajax requests


        2. updating (when it changes)
          setState() -> re-render causes the
          you or one of your parents re-rendered (propbably because of setState)
          the new score has appeared on the screen (in the render) so now lets sync it up to local storage etc

          componentDidUpdate(prevProps, prevState)



        3. unmounting -> when the component is coming off the page
          not as common (a place for cleanup)
          if you don't have a place to put clearInterval, the code will continue to exist in the browser 
            so will happen multiple time (whenever setInterval is called in component did mount)

          The other main time you might use this is to cancel ajax requests


        x. shouldComponentUpdate(nextProps, nextState) { // used for improving performance
             return this.props.isLit !== nextProps.isList // should return boolean value 
           }

          show example using lights out and the react debugger
          when is nextState useful?
          allows you to prevent a component from re-rendering when the state hasn't changed


      -all day lab



8-4 lecture -> React Forms
  lab -> React Forms Exercises
    ready score 5 (already gave this)
      -morning lecture
        make sure you get the ording right, otherwise went fine
      -lab

        make sure that students are doing three steps to get enzype working

        1. create a setUpTests.js file (make sure that tests is plural)
        2. place the following in setUpTests.js
             import { configure } from "enzyme";
             import Adapter from "enzyme-adapter-react-16";

             configure({ adapter: new Adapter() });
        3. install enzyme
            $ npm i --save-dev enzyme enzyme-adapter-react-16 \
                               enzyme-to-json




8-3 lecture -> React Events
  lab -> Hangman -> Lights Out
    ready score 3.5 => this lecture has a lot of conceptual lecturing around this and binding

      -morning lecture

        why bind this??

          the keyword this is defined when the function is called

          try to keep render small but more importantly keep the return small, you can't debug in the return, but you can in the render
            even for things like maping over the state to render list items

          The reason binding is required has nothing to do with react, it is how classes work in es2016
            show not react code breaking in the same way

          The keyword this is a value that is determined when the function is invoked

          instance methods are not bound by default

          the keyword this is not automatically bound to the instance that is created
            it will be undefined if it is not bound explicitly

          if we always want this to have the correct value of the keyword this we can use bind

          functions use their reference to this when the function is being referenced ouside the instance of the class
            if you re-assign the function from the class to a different variable, the function looses it's reference to this unless
              this.fn = this.fn.bind(this)

          if we need access to this when we pass a method down to a child component it has to be bound
            when someone else runs a function for us this has to be bound
            if this is not needed then the function doesn't need to be bound

          use console.log to see the current value of this in your methods

          instance methods loose their this context when called by event handlers, or when passed down as props

          key takeaway
            class and instance methods are not bound by default
            when you are not in control of envoking the function / when someone else or js envokes that function for you, the this context is lost

          common error for not binding (show the actual error)
            cannot read proper setState of undefined -> this lost it's context to this so it is undefined

        why bind in the constructor instead of inline
          when you bind you get back a new function
          you don't want to do this in the render because each time setState is called and the component re-renders you don't want to bind multiple times
          if bound in the constructor the bind only happens once

          its best to bind in the constructor, don't bind twice, use inline arrow functions to pass in additinoal arguments

          arrow functions don't get their own keyword this they just use the closes this available


       passing functions as props to child components

         data flows top down
           if setState is called in a child it will re-render but the parrent won't
           if the parent setState is called it will re-render along with the children
           
           do not name your props the same name as your function, it gets tricky

       use debugger to follow the flow of the application (child and parent components)
         quiz students on where the code will go next
           debugger in each function called
           debugger in render

       keys
         need to be unique, need to be stable
           -> similar idea to primary keys
           -> you will have really bugs is you use index



          

        

      -morning lab
      -afternoon lecture
      -afternoon lab


8-2 lecture -> React State -> React State Patterns
  lab -> Eight Ball -> React State Exercises
    ready score 3.5  (difficult to explain state, need to work on tests)
    ready score 3  (need to get a better handle of rest and spread opperator)
      -morning lecture
        review of props
          you can not change props
          props are immutable

        setState is probably the most important concept in React

        emparitive vs declaritive
          React is more of a a declarative framework
          JQuery is more emparitive

        why do we use setState?
          why state is the root of all evil
            you don't know what the data is going to look like at all times
            there is uncertainty

          you can't set state without this.setState(object)
            this.state.count = 1 // this won't work

          makes it easy to see everywhere in our application that we are interacting with the state

        build a count component live that has state and increments state on each button click
          have students give you line by line

        every time setState is called render() is invokoed
          next week we will see how to prevent render from being ran (don't explain now)

        ??? anser to question on the spot
        Older version of Angular, backbone, ember are not as state based they are more like jquery on steroids
        Never versions of Angular, Vue, React are more centered around component based state

        try keep the render small (move the logic into helper functions if necessary)

        setState is smart
          if you update the count but not the name (in the example component)
            only the count will update

        punt on explaining .bind (more detail tomorrow)


        what is this
          it's a keyword
          you can't define this
          it's value is determined at function execution

        show the demo code where the arrow function works with setInterval and function doesn't because of function 
          has it's own this and the arrow function doesn't
          arrow function has the keyword this but it finds it's parrent's this, function() makes it's own


      -morning lab

        when testing you need to access elements in the wrapper using methods like wrapper.html()

      -afternoon lecture

        you cannont put setState in the constructor
        you cannont put setState in render (setState causes the code to re-render so infinate loop)

        make the connection between setState and render()
          render does not happen after the function calling setState is finished
          it happens after setState is called
          the second cb argument to setstate runs after setState / render is complete


        setState is asyncronous
          rage clicking is firing off more state updates than the callstack can complete
          so when a setState happens it might actually be accessing an older version of state

          you should pass in the a function referencing the current state as the first argument
            you should always return an object from this function
            if you don't care about the current state, you can just pass in the new object

            this.setState(st => ({key: st.key + 1})); // use the () surrouding {} to return the object from the function 

          the reason render is called immediatley after setState is called is so that we are not slowing down the re-render

          it's possible to change the state without setState() but the component won't re-render so it is pointless



      -afternoon lab


8-1 lecture -> ReactJS -> React: CRA, Modules, & Testing
  lab -> JSX Exercises -> ES2015 Module Exercise / React Props: Pokedex
    ready score 4 (would probably useful to observe at least once more)
      -morning lecture
        is jquery a library or framework ?? probably library 
        react seems to be more of a framework

        frameworks take more time to learn
        more conventional with easer to understand patterns and easier to read others code

        traditional seperation of concerns
          js, css, html each was kept in seperate files
            don't put css in your html
            don't put js in your html
            js should not change css

        student1 -> css
        student2 -> js
        student3 -> html

        after 
          student1 -> is in charge of two components

        looks like you are putting html in javascript
          but actually you are putting html in jsx

          we have seen puting js in html with nunchucks, , jade, pug

          translate/compile => transpiled

          babel does many things
            new js -> old js (js that browsers can run)
            typescript -> old js
            jsx -> old js

            show example
              babeljs.io/repl

            user case of company who wants their websites to run on old browers but want developers to use new js

        components return jsx

        explain everything that is needed to get the most basic react app running
          import scripts etc...

        react is good for building modular things

        all react components must have uppcase names (they are classes)

        properties are similar to passing in values to the constructor of a class

        inside the javascript of a component you can't use if else blocks / while loops etc
          common patterns: (you can only use simple expressions)
            ternary operators
            so are .map and .filter


      -morning lab

        common bug:
          order of the script tags

          the instance of new Date() can't be an object -> it needs to be a string
          date={new Date().toDateString()}

        error message : React component must render <Component /> instead of Component
          means your forgot the opening and closing tag of the component


      -afternoon lecture

        react has hot reloading 

        webpack hides the requirment to import script tags for your components

      -afternoon lab


7-5 lecture -> express-wrappup
  lab ->  
    ready score -> 3 (a little tough.. explaining Redis)
      -afternoon lecture
        why don't we need to worry about csrf with express jobly?
          we are not using cookies for auth, we are using token based auth
          cookies are vulnerable to csrf, it's not that jwts aren't its just that the token in getting passed at every request

        helmet takes care of prevent csrf similar to wtforms

      -afternoon lab


7-4 lecture -> Deployment with Heroku
    ready score 3.5 not as comfortable with this but could probably do it with some effort
    
    lecture
      after deploying to heroku and creating a psql db you can check heroku:config to get the DATABASE_URL 
      on your own machine you can connect to this directly to the database
        $ psql (paste the name of the db)
        -or-
        heroku pg:psql

        $ heroku pg:psql < data.sql (to seed the db)

7-3 lecture -> none
  lab -> jobly 
      -lab
        If a route requests companies, jobs ect and there are no companies or jobs in the database you probably should't throw a 400 error, 
          instead just return an empty array. If you are going to design the front end that way make sure you explain yourself in your docstrings

        Be prepared to explaing how the error handling works

        Testing if error thrown
          test("Will get error message if there is no match 1", async function () {
            let query = { max_employees: 1 };

            try {
              await Company.getCompanies(query);
            } catch (err) {
              expect(err.message).toEqual("No matching companies.");
            }
          });


        Code review 1
          check tests
            companies &  

          Seperate out the Companies.get() logic into a seperate method, only leave the db.query
            This needs to be refactor in the solution
            this will make it easier to test the logic without making db.queries


          test coverage
            should be in the low to mid 90's

              instructions: 
                $ jest -i --coverage
                  -> will create a folder in your application (should be put into .gitignore)
                     this folder will have an html file to open


          encourage students to do tdd for the step 2 Jobs routes

          Tests too friendly
            sometimes tests don't catch all the possible ways that something can fail
            jest has expect.assertions(2) is a way to strengthen tests
              a way to make sure assertions in a test actually got called


        Delete cascade (many jobs belong to one company)
          Jobs table
            company_handle TEXT NOT NULL REFERENCES companies ON DELETE CASCADE
        





7-2 lecture -> Validation with JSONSchema -> Express Testing Practices
  ready score 4.5 (excitment: not really but whatever)
  lab -> 
    meta question -> why jsonschema
      you don't want a bunch of if else statements when rolling your own
      it scales well
      error prone

    why mock -> make fake data

    validations -> should we validate on multiple levels?
      instead of going to the database, skip the step and fail faster
      extra saftey / more methodical to put NOT NULL on the SQL backend

      -morning lab
      -afternoon lecture(

        reasonable to set up jsonschema on a live app

        use debugger to explore jsonschema response

        json schema examples are useful for generating useful error messages
          ex: your data should look like ...

        you will have different schemas for create and update

      -afternoon lectureII

        Integrations provide great coverage but are very brittle

        Test the route not the db
          or even test the model not the db

        Unit test really should just test one thing

        Mocks -> 
          instead of going to the database you just use an object 
          sometimes entire databases are mocks
          
          advantages -> 
            can be faster
            don't have to deal with rate limits on an api
            mocks are pure, there are no external forces

          common case ->
            mock the expected data returned from an external api call

          disadvantages ->
            can take a lot of setup
            not always necessary

      -afternoon lab
        The 'async' in async function() is not necessary in the describe tests, only recently has jest began giving a warning message for this

7-1 lecture -> Hashing and JWTs with Node
  lab -> Message.ly
    ready score 3.5 (need a little bit more time to understand this but excited to teach it)
      meta question
        what is the difference between cookies and tokens?

      -morning lecture
        bcrypt returns a promise (it can be slow by design)

          show in node terminal after install and require
          bcrypt.hash('secret', 12).then(console.log)
          bcrypt.compare()

        rounds
          the higher the rounds the slower it is to brute force (artificial slowness)
          the rounds have an affect on the hash output but the salt doesn't
          12 rounds is a good choice currently but because of moors law (every 18 months computer double in speed)
            these rounds will continue to need to be increased

        hash upgrade
          a user will be locked out and asked to log in again and the password is passed to an updated hash (example bcrypt with 13 rounds) 
          and the new hash is stored

        show the $5 wrench cartoon (if they haven't seen it already)

        good idea to set if (await bcrypt.compare(password, user.password) === true) {}
          because if the await is taken off bcrypt.compare() will return a promise (promises are truthy)
          should be fine with the await but what if someone removes the await mabye uses .then instead

        jsonwebtoken
          jwt.decode(token) => (not a secrecy layer) it dosen't check the validity just decodes what the jwt has in it it 
            (bad method name because it sounds like you are authenticating a user but really you are just transcribing)
            (.decode sounds like the opposite of .encode but it is not ???) what is the difference between encode and decode?
          jwt.verify(token, 'secret-key') => will throw an error if the token is not a valid signature
            (is used %99.9 of the time to actually authenticate a user)

          When is decode ever really useful???

        whith flask 
          store the authentication in g

        with node.js
          update the object on the req
            example: req.user = jwt.verify(token, SECRET_KEY)

          Authentication middleware
            sole purpose is to add something to req.user
            later we can check req.user to see if the user is authentic
        
        its common to put authentication on every out with app.use(authenticateFunction) (authentication middleware)
          but the function that is actually checking if there is req.user can be another function (example : isUserAuth / isUserAdmin)


      -morning lab
      -afternoon lecture
        Unix
          environment variables

          $ MY_NAME="Nate Lipp" // only runs on this line

          Python
            import os
            os.environ['MY_NAME']


          MY_NAME="Nate Lipp" node app.js

            Node
              process.env["MY_NAME"]

          export MY_NAME="Nate Lipp" // is available for as long as the current terminal session is open

          bash_rc makes it possible to configure them automatically
    Also a strategy for setting something secret without commiting to github
      -afternoon lab
        make sure you understand what messagesFrom(username) and messagesTo(username) do in the User model
        make sure students are calling  
          $ jest i
          should be 
          $ jest -i 
          or no -i flag at all

 6-5 lecture -> Database OO Design Patterns
    lab -> Lunch.ly Reservation System 
      ready score 3.5 (need a little more time with proper oo programming)
        -morning lecture
          companies are moving away from large frameworks like rails django and instead use multiple microservices using node or flask

          show two patterns
            #1
              router.get('/', async function(req, res, next) {
                ..
                ..
                return json(cats)
              }

            #2
              router.get("/", getCats)
              router.post("/", getCats)
              router.get("/", getCats)

              function getCats(req, res, next) {
                ..
                ..
                return json(cats)
              }

            beifits 
              easier to read routes file -> seperation of concerns, sql queries, auth should be handled in the models
              easer to put in middleware -> router.get("/", userIsAuthenticated, getCats)
              easer to test getCats (doesn't need supertest)
            
            why do we use object orientation
              it helps us organize our code

              abstraction -> a cleaner userface what are the tradoffs
              emcapsulation -> keep everything related to cats self contained
              polymorphism -> what is polymorphism?

            functional programming -> loaded term
              React is a good example of combining both functional programming and oo programming
              sometimes oo can be pretty ridgid

              some languages don't have classes => haskel, closure
              some languages more heavily use classes => Java, Ruby

           class Cat {
             static async all() {}
             static async get() {}
             static async create() {}
             static async update() {}
             static async delete() {}
           }

           Gat.all should not belong to a single instance of a Cat

           class Dog extends Model {
             static async all() {
               super('dogs', 'name')
             }
             static async get() {}
             static async create() {}
             static async update() {}
             static async delete() {}
           }

           Dog shares similar functionality to Cat so we could inherit from a Model class

           'Getting All Dogs' Dog Model using map to instanciate a class for each row means you will have access to the instance methods for each Dog
              
        -morning lab
          error : invalid input syntax for integer: "search"
            when students implement search route make sure the route is above the route for finding a customer by id


           this is the correct pattern for seaching for a user
             students aften put unneeded '' arount $1


              const results = await db.query(
                `SELECT id, 
                   first_name AS "firstName",  
                   last_name AS "lastName", 
                   phone, 
                   notes
                 FROM customers
                 WHERE first_name || ' ' || last_name ILIKE $1
                 ORDER BY last_name, first_name`, [`%${name}%`]
              )

             WHERE first_name || ' ' || last_name ILIKE $1`,
             WHERE first_name ILIKE $1 OR last_name ILIKE $1`,
             [${name}]

        -afternoon lecture
        -afternoon lab

          make a search query request

            <form method="get" action="/search">
              <input type="text" name="term">
              <button type="submit">Search</button>
            </form>


  6-4 lecture -> Intro to Postgres with Node -> Node Postgres Relationships
    lab -> BizTime 
      ready score 4 (would like to be stronger on sql)
        -morning lecture
          there is not a lot of concensus on a sql orm
          mongoose is only for mongodb witch is not as popular these days
          run seed file
            psql db_name < seed.sql

          sql injection
            do not do string interpolation or string concatenationnn in your raw sql
            the two dashes in the slides signify a comment to make it look like you are making a comment
              run two statements but pretend the second one is a comment

            the `where type=$1`, [type] pattern is sql not javascript
              I understand the pattern of the code but don't exactly understand how the pattern prevents the sql injection

            show example of sql RETURNING in the terminal

            pg doesn't use transactions 
              BEGIN
              COMMIT
              ROLLBACK

              ORM's do this for us but we have to specify this manually when building our own orm
                We can just put BEGIN etc write in the sql query

          firable offenses
            sql injection (not parameterizing your variables)
            storing passwords in plain text

          codesmell
            our routes are doing to much when we put the sql right in the route
            sql should belong to the model

        -morning lab
        -afternoon lecture
        -afternoon lab
          if you get an error in testing about timout, don't forget -> db.end()
          should not nibble test, test toEqual the entire response



  6-3 lecture -> 
    lab -> -> 
      ready score 3.5 -> need to strengthen error handling (second hour)
        meta question: what is middleware (should return a function.. why?)
        how is middleware implemented
          app.use(middleware) -> calls the middleware function on every route in the app
          alternativley you can place any midleware function manually to the route as an argument after the route before the callback function

        middleware will be covered again during jwt lecture
        -morning lecture
          make a connection between eventListeners and node routes
            element.addEventListender('click', function() {})
            app.get("/users", function(req, res) {})

            each cb function in route handlers gets two parameters (req, res)

            you must specify the return
              return res.send();
              return res.render();
              return res.route();
              return res.json({'one': 2}); // converts to json


            app.get("/chaining", function(req, res) {
              return res.status(201).send({'its': 'good'})
            });

            make an express app live, students drive
              show the $ yes command in the terminal
              no server restart out of the box

              echo node_modules > .gitignore

            order matters
              routes are read top to bottom

            app.get("/users:id", function(req, res) {
              return req.params.id
            })

            http://localhost:3000/query?name=nate&lastname=lipp
            app.get("/users", function(req, res) {
              res.send(req.query)
            });

            teaching middleware
              make a post with json body through insomnia then show req.body without the middleware (undefined) and then fix with the following
                app.use(express.json()); // this replaces body parser
                app.use(express.urlencoded({ extended: true })); // this is actually not required. what is it for??? full page renders, redirects???

            error handling
              the error handler should be at the end of all routes before app.listen()
              to move to the error handler directly use 'next' as the third argument in your function(req, res, next)

              matches every route, every verb so it belongs at the end, right above the error handler
                app.use(function (req, res, next) {
                  const err = new ExpressError("Not Found",404);

                  // pass the error to the next piece of middleware
                  return next(err);
                });

            debugging
              turn on the debugger
                nodemon --inspect app.js
                in a new tab
                  about:inspect 
                  click 'inspect' link

              


        -morning lab
        -afternoon lecture
        -afternoon lab


  6-2 lecture -> Testing with Jest
    lab ->  
      ready score 3.5
        -morning lecture
        -morning lab
          students were trying to build strings of words with concatination instead of arrays
        -afternoon lecture
          nibble testing (not great) is when you have many expect's in your test
          it is better to assert a larger amount of data (maybe use toEqual() instead)
        -afternoon lab


  6-1 lecture -> JavaScript Callbacks & Asynchronicity -> Intro to Node.js
    lab -> Asynchronous Code in JavaScript -> Node Files 
      ready score 4, 4.5
        -morning lecture
          Axios is more modern and doesn't use callbacks
          Older ajax libraries usually do, such as jQuery

          Callback hell is particularily hard to do with error handling

          Promises were originally included in add on libraries (such as bluebird) but so useful they were incorperated into the library in 2015

          .then .catch slide
            example one is suposed to be a successful request, the second is an error (uses taco in the star wars api)
            this is to show how .catch works

          Promise Chaining
            a new promise must be returned to chain .then
            only needs to have one error handler

            a promise must return a 'thenable' thing in order to call .then on it
              (if it doesn't then it will call .then on the original promise???)

            async await came after the Promises .then .catch pattern but async await also uses promises under the hood

          Async
            key takeaway : async functions always return a Promise!

            feels like we are waiting for the function to resolve before moving forward

            uses a co-routine

            Promise.all starts all the requests in parallel then goes through each answer in order, if the current request has not completed we will wait
              but the next request could already be finished and is placed in the results array immediatley
              This is instead of having each request block the next

            Promise.race([p1, p2, p3])
              Useful if you want to get back the price of a stock and you want the fastest possible answer -> ask multiple apis and return the first to resolve
              This can also be useful if you are worried about a sigle api being down

        -morning lab
        -afternoon lecture
        -afternoon lab


  5-2,3 lecture -> flask-cafe    
    lab -> flask-cafe    
      ready score 3 (with work could do this well)
        -morning lecture
          seperate general hash function and cryptographic hash functions

          a basic explination of arrays and hash tables to show why hash tables are constant lookup using python build in hashing algorithm (not cryptographic hash)
            could intro with why we move data from lists to hash tables 
            how are arrays constant lookup by index
            how are hashes constant lookup by key

            how do arrays work?
            how do hash tables work?

          cryptographic hash
            a good hash can never be reversed
            lookup tables can record previously hashed outputs so you can match them but the hash never goes backwards
        -morning lab
          instead of cities/new (in the instructions) should be cities/add (to match the tests)
        -afternoon lecture
          Coverage.py -> a tool for measuring code coverage of Python programs
            $ coverage report *.py
            $ coverage html *.py
            $ open htmlcov/index.html
            $ # coverage run -m unittest -v tests

        -afternoon lab
            bug:
              line 99 in the app.py solution
                - return render_template('signup.html', form=form)
                + return render_template('auth/signup-form.html', form=form)


  5-1 lecture -> flas-rest-json-api
    ready score 4
    lab -> -> flask-cupcakes
      -morning lecture
        idempotent (repeatable) -> doesn't change regardless of the number of requests
        safe -> doesn't change the database
      -morning lab
        questions about validations -> not needed, wtforms is in the further study
        how to return the id from the cupcake post request
          some students were trying to make another trip to the database to get the most recently created cupcake post to access the id for the json return value
          this is available the the cupcake is instanciated in the model, no extra trip needed
      -afternoon lecture
      -afternoon lab
        Difficult to debug: Parrent instance is bound to a session / lazy loading error -> was happening in the minittest / detached state
          tests were written correctly but the post request was making an extra trip to get the id from the db after the new data was posted to the db
          Fix: get the id off of the instance of the Cupcake model in the post route and avoid the extra trip to the db

          This error was also happening in tests for Andrew
            In the setup of all tests User and Like were able to be saved to self but Cafe not working
            Inside the test setup Cafe instance was attached to self and verified using pdb
            But in the specific tests self.Cafe threw the error even though self.User and self.Like was working fine ???
            Still don't have a solution

        When making a patch request, passing an empty string as the input for image is not going to trigger the default in the model.
          Your are not creating a new instance of the model so even if you change the value to None you won't trigger the default

        The wording on Part 5 is a little confusing to it asks to use a Jinja template to render a form, 
          this does not mean to return python imbeded in the jinja template, 
          students should still use the returned json from the endpoint and add it to the html with jQuery
          

  4-5 lecture -> wtforms -> flask-ext-apis
    lab -> -> flask-adopt
      -morning lecture
      -morning lab
      -afternoon lecture
      -afternoon lab
        The petfinder API changed and now requires you to send a the api key in a request, recieve a token and then make another request with the token
        The lecture was not very long, this could maybe be included in the lecture or point then in the direction of the old documentation

  4-4 lecture -> sqla-m2m
    lab -> Blogly
    ready score 2.5
      -morning lecture
      -morning lab
      -afternoon lecture
        Issues with setting values to nullalbe because an empty input in a form comes through as an empty string not null
        nullable="True/False" be careful with this because when a user submits a form with empty input values, that is not the same as null that is ""
      -afternoon lab



  4-3 lecture -> sqla-intro -> sqla-associations
    lab -> Blogly
    ready score 2.5
      -morning lecture
        psycopg2  (specifict to psql)
          a driver / adapter for connecting psql with the flask server 
          not specific to flask can be used with other python frameworks
          uses raw sql

        ORM object relational mapper (SQLAlchemy)
          abstraction on top of psycopg2
            we don't have to write raw sql
            the response from the datastructure is better structured (instead of a list of tuples, better datastructures)
            sqlalchemy also handles escaping sql for us to prevent sql injections
          SQLAlchemy is belongs to python not flask specific

        SQLAlchemy Model
          One model for one table
          class is singular
          table is plural

        DDL data definition language
          defining columns / class properties

        DML data method language
          creating a row

        One model per table!

        __tablename__ = 'pets'
          necessary because we don't want the tablename set to Pets by default, a tablename should be lowercase singular

        run
        db.drop_all()
        db.create_all()

        db.session -> 
          opens a session, sessions have to be commited
          not related to flask session
            db.session.add(updted or new instance)
            db.session.add(updted or new instance)
            db.session.commit() // same as sql COMMIT

      -morning lab

        when runnig the solutions file for part one there is an error
          TypeError: Additional arguments should be named <dialectname>_<argument>, got 'nullabe'


        changing the model to 
          from
            image_url = db.Column(db.Text, nullabe=False, default=DEFAULT_IMAGE_URL)
          to
            image_url = db.Column(db.Text, default=DEFAULT_IMAGE_URL)
        fixes the issue

      -afternoon lecture
      -afternoon lab

  4-2 lecture -> Relationships in SQL -> DDL & Schema Design
    lab -> Joins Exercises -> Data Modeling Exercise
    ready score 2 (need more with o:m m:m joins)
      -morning lecture
        referential integrity -> your references must have integrity, they must point to something
      -morning lab
      -afternoon lecture
      -afternoon lab
        possible improvments
          more practice with joins
          a clearer directive / guideance on the schema brainstorming
          maybe some practice with syntax
          some solution examples even though there is not an exact right answer

    review
      primary keys enfource uniqueness
      foreign keys enforoce referential integrety

    key takeaways
      group by 
      aggregates


  4-1 lecture -> databases-intro -> sql-query
    lab -> sql-querying
    ready score 3 (need more time with labwork)

    express: what is this for?
      app.use(express.urlencoded({extended: true}));
    
      -morning lectures
        table, row, colum
          field -> where the row and colum intersect
          companies like psql because it's free! (probably the most popular of the opensource sql)
          only a section of the slides are psql specific most are general to sql
          show how to create a db live -> access an existing db

        Aggregate functions usually use GROUP BY otherwise you are grouping by everything

        SELECT COUNT(*) FROM books; -- counts the nubmer of books
        SELECT COUNT(price) FROM books; -- counts the nubmer of books that have a price (not null)

        seeding -> 
          you generally aren't given access to a specific database instead you are given the data in an sql file
          with the seed file you can write the data to your own db

        sql
          select is all about getting rows
        
        SELECT actually happens after FROM, WHERE, GROUP BY even though it appears first in the statement (so you know what data to select from)

        possible review questions
          where do you save / backup the data in your database
            data can be stored in an .sql file and saved to github

        difficult concepts
          GROUP BY

            analogy
              the table is like a filing cabinet
                take out the files and GROUP BY author

        sql does not have expression overload
          adding two string together sql uses || ', ' || instead of + ' '
          SELECT author || ', ' || price
            FROM books;

        common questions
          is there an undo (not really)
            back up your database
            tomorrow we explore transactions

        common gotchas
          The order of the query is unreliable without specifying ORDER BY
          If you are going to use LIMIT OFFSET (commonly for pagination) you must use ORDER BY to be sure that there are no duplicates

        ask about
          security and seed files

      -morning lecture
        the sql zoo is much different than the materials we learned in lecture

      -afternoon lecture

      -afternoon lab

  3-5 lecture -> flask-testing
    lab -> flask-boggle
    ready score
      morning lecture
      morning lab
      afternoon lecture
      afternoon lab

  3-4 lecture -> flask-tools -> flask-session
    lab -> pet-shop -> flask-shopping-cart
    ready score 
      morning lecture
        redirects are new requests 
          the redirect is an actual header response (on the location header) for the client to make another request
          when making a phone call instead of transfering, a new phone number is given to the caller
        redirects should be used after post requests so if the user refreshes the page you are not showing the popup for the form submission
        jsonify not only converts a dictionary or aguments to json but also updates the header to signal to the client it is sending json

      morning lab
        common questions
          where should we put our flash messages?
            This is despite the notes in the base.html page, remind students to slow down and read the starter files before starting
        concepts
          debugging with pdb
          so help them remember to “c[return]” to finish pdb before editing file
          "n" is for going to the next line
          if they do get a weird terminal state (usually, they can’t see what they’re typing), type “control-c” to get to shell, 
          and type (blindly) “stty sane[return]“, which should un-screw-up their terminal

          [basically, what’s happening is PDB claimed control of unix-stdin but they can’t see it, because flask restarted. 
          “stty sane” is a unix command that reset the terminal (‘stty’ is an ancient term for that) to “sane” default]

        common mistakes
          students should not be accessing _pets dictionary directly use the get_all(cls) method
          may need to remind students to use the Pet class code provided instead of implementing that code on their own in the routes

        pull request (make sure you pull the latest code before doing this!)
          flask-pet-shop-solution/
            show-pet.html 
              line 3: - {% block title %} All pets {% endblock %}
              line 3: + {% block title %} {{ pet.name }} {% endblock %}
      afternoon lecture
        cookies are generated on the server
          http responses give the cookie back in the 'Set-cookie' header 
          the cookie is stored in the browser
          the request header passes the cookie back in 'Cookie' header
      afternoon lab


  3-3 lecture -> flask-intro -> flask-jinja
    lab -> flask-greet-calc -> flask-madlibs
    ready score 3.5
      morning lecture
        common commands
          flask run (looks for app.py)
        @app.route('/') is refered to as both route and view
        the functions in app.py are view functions (app.py is the View of mvc)
      morning lab
        make sure students are in (venv)
        students should be in development mode ($ FLASK_ENV=development run flask, but should be in .bashrc) 
        questions about ~/bash_profile
          do we need to make our own .gitignore
          how to verify that venv is not getting tracked
          .gitconfig

        use a dictionary for saftey when accepting user requests
          lookup = {
            1: one,
            2: two
          }
      afternoon lecture
        import pdb; pdb.set_trace()
        (venv) pip3 install flask-debugtoolbar
        keyword argument name=name (used to pass varialbe to html templates with jinja)
      afternoon lab
        common bugs
          copy and pasting the template without installing the new libraries they are trying to use, forgetting -r 
          $ pip3 install -r requirements.txt
        common question
          should we post or get with madlibs
            -> are you posting to database / charging a credit card / changing the world (then get request if probably fine)
            -> does it matter if you press back and forward mid submission (then get request is probably fine)


    questions
      Do you have to pip freeze > requirements.txt every time you install files?


  3-2 lecture -> python tools -> python oo
    lab -> 
    ready score 2.5
      morning lecture
        need more practice with error handling
        virtual environment
          $ cd cur_directory
        1 $ python3 -m venv venv (make venv module then imediatley call venv)
          $ ls (should show venv)
        2 $ pip3 install flask
        3 $ source venv/bin/activate (activate the venv, should how show (venv) in the terminal) 
          $ pip freeze (lists what has been installed)
        4 $ pip freeze > requirements.txt (write to a file)
        5 $ deactivate (get out of venv)
        6 $ pip install -r requirements.txt (recreate venv)
          add venv to .gitignore

        git clone ...
        1 $ python3 -m venv venv (make venv module then imediatley call venv)
        2 $ source venv/bin/activate (activate the venv, should how show (venv) in the terminal) 
        3 $ pip freeze > requirements.txt (write to a file)

      morning lab
        a couple problems can be solved with sets in linear time instead of nested for loop quadratic time
      afternoon lecture
                
      afternoon lab
        Be prepared to explain keyword arguments in python (the ability to specify which argument you are passing in)
        >>> serial = SerialGenerator(start=100)
        students need to be aware that linix machines use '\n' for cariage returns but windows uses '\r\n'
        solution: .strip() accepts arguments or if no arguments are passed removes all whitespaces, carriage returns, tabs
        Have students create class docstrings that are testable
        Possible solutions
          .splitlines and then .strip() on each line
          [word.strip() for word in open('./words.txt', 'r')]
          [word.strip() for word in open('./words2.txt', 'r') if not word.startswith('#')]
        Question: Do we need to close the txt file after openning it?
          -> not important when running simple scripts, this becomes important when we work with actual web apps

  3-1 lecture -> python syntax
    lab -> pyton data strucure practice
    ready score 3.5

    morning lecture
      $ brew install ipython
        ipython3 doesn't work, must default to latest version?
      Accessing the he python interpreter
        python3
        >>> 
      most common conventions
        snake_case instead of camelCase
        4 spaces as indent instead of 2

      is const and let function scoped in js?

      play around with this code and compare to js hoisting
        x = 42
        def my_func():
            x = 12
            print(x) # 12

        print(x) # 42

      run code with ipython instead of python
      ipython 
      [1] %run file_name.py

      $ python3 -m doctest [filename].py


    morning lab
      some students didn't have all the installs finished
    afternoon lecture
      read the lecture notes before class
      does sorted(arr) mutate?

      Set Operations (found in Python Data Structures)
        moods = {"happy", "sad", "grumpy"}

        dwarfs = {"happy", "grumpy", "doc"}


        moods | dwarfs    # union: {"happy", "sad", "grumpy", "doc"}

        moods & dwarfs    # intersection: {"happy", "grumpy"}

        moods - dwarfs    # difference: {"sad"}
        dwarfs - moods    # difference: {"doc"}

        moods ^ dwarfs    # symmetric difference: {"sad", "doc"}

    afternoon lab
      terminology
        list comprehensions 
      how to easily remove spaces from a string in python?
      the compact function is being used twice around problem number 13
      number 26 has a weird test for None


  2-5 lecture -> sprint
    lab

  2-4 lecture -> hack-or-snooze
    lab     -> sprint
      lectures
        static is how you create Class methods in js
      lab
        google chrome is caching too much a not always updating after a debugger is added to the code / in the network tab there is an option for disable cache
        when favoriting a story the event listener for each story star gets lost when clicking links in the navbar using event delegation fixes this


  2-3 lecture -> axax -> apis
    lab     -> tvmaze -> gify party
      morning lecture
        acyncronous analogy -> asking someone to get information and continuing to talk while the person goes to get the anser
        async example of function expression might be nice in the slides -> const foo = async function () {}

        full example :

          async function name() {
            return await axios.get("/api/card");
          }

          async function getName() {
            const res = await name();
            return res + 10;
          }

          await getName();

      morning lab
      afternoon lecture
        got tripped up on results.data type error, needed results.data.data
      afternoon lab

  2-2 -> jQuery -> How the web works
  jQuery ready score -> 3 -> need to improve vanila js familararity
  how the web works ready score -> 2 -> 
    morning lecture
      don't mix vanila js and jquery
      know the difference between DOMContentLoaded and window.onload
        you don't need to / shouldn't put all code in $(function() {}) -> for testability, don't put classes, helper functions
      the most valuable part of the lecture was to quickly review the jQuery methods we learned in the therminal live at the end
      event delegation -> allows you to reduce the number of eventListeners added to elements in your html
                          adding an event listener to a single delegate element (parent) responsible for listening for events an all of its children
                          this is instead of adding a sigle event listener to every single child element individually
                          $('ul').on('click', 'li', function(evt) { 
                            console.log($evt.target).text() // the child has to be transformed to a jQuery object from a html element
                          }); 
                          li is the child of the ul delegate(parent)
      selector caching -> saving the resoult of a jQuery selection to a variable to you don't have to search the document multiple times
    morning lab
      using $("").eq(0) instead of get returns a jQuery object instead of an html element which is better practice for chaining together jQuery
        but just taking the .value off of the html element is acceptable too for this
    afternoon lecture
    afternoon lab
      got a bit tripped up on the labwork, only read the solution link and didn't see the 3 other parts to the exercise

    python3 -m http.server


  2-1 -> css-1 -> bootstrap
  ready score 4 ->
    morning lecture
      things I didn't know
        margin collapse
    morning lab
      understand that position: fixed positions itself off of the body container not the nearest relative / absolutly positioned element
    afternoon lecture
    afternoon lab
      students didn't take the advice and read through the bootstrap docs before starting the exercise and most didn't know what a jumbotron is
      maybe there could be some direction given on how to approach reading the documentation, looking through the docs without reading word by word
      students got out of the habit of asking for a code review but seems especially useful to them on the bootstrap mock-1 exercise

  2week

  1-5 -> oo_programming -> this -> connect_for_refactor
  ready score 2 -> might be a little difficult to field student questions / this is harder
  things I didn't know
    t1 = new Triangle();
    t1 instanceof Triangle => true
  morning lecture
    The check for tie in the connect for game every => every would be a good advanced exercise after teaching the fundamentals of the build in methods
  morning lab
  afternoon lecture
  afternoon lab
    be prepared to explain this line of code // top.addEventListener('click', this.handleClick.bind(this));

  1-4 -> git -> connect four
  ready score 2
  things I didn't know
    setting upstream -> $git push -u origin master // now you only have to git push to push to master
    setting origin to a githup repo address so you don't have to type it each time, this is done automatically but you can set manually / change
    $git remote -v
    terminology -> object key value pair is same as object property
  explore further
    does js have multiple class inheritence (yes but not commonly -> see mixins)
  morning lecture 9:15 -> 11:45
    Most of the morning was lecture
    I didn't have mucn to add
  morning lab
    There wasn't much time in lab but students started connect 4
  afternoon lecture
    Just a quick intro
  afternoon lab
    Most students were able finish or almost finish connect 4

  1-3 -> big-o -> prob-solving-freq-pointers
  ready score 4
  morning lecture
    Some students where a little unclear why pushing to an array is O(1) and unshifting an array is O(n) in lab
      You could think of it as lined paper
    example site for displaying time complexity -> https://rithmschool.github.io/function-timer-demo/
  morning lab
    Students ran out of things to do, some looked at afternoon problems, some re-visited the simon game from yesterday
  afternoon

  1-2 -> js-intermediate-1 -> js-intermediate-2
  ready score 5
  personal
    Spent 1 hour in the morning going over calculator but didn't finish simon game
  morning lab
    not enough time to get to simon game in the morning
  afternoon lecture
    finished 3:30 was a little long
  afternoon lab
    most had time to do the intermediate-2 refactors and go back to the simon game
    There is not a bug in the refacotor of default variables, 0 is a falsy value

  1-1 -> intro / pro-coding
  ready score 4
  personal
    I should have gone over the exercises, I wasn't prepared enough for lab
  morning lab
    none
  afternoon lab
    seemed slow sometimes, maybe students wanted more challenge / lab time
    most students got to triangles but most didn't spend much time on it

  1week





























  ****************************************************************************************
  assessments

    web-dev-1
    web-dev-2
    flask-1
    databases
    flask-2
    node-express-1	
    node-express-2
    react-1	
    react-2	
    react-3	
    dsa
    Web Dev 1 / r12
    Web Dev 2 / r12
    Flask 1 / r12
    Databases / r12
    Flask 2 / r12
    Express 1 / r12
    Express 2 / r12
    React 1 / r12


    *******************************************
    email grades 
      -> all submissions must be marked as complete

      http://sis.rithmschool.com/admin
        link : assessment sessions
